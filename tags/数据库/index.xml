<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库 on 牛哥聊技术</title><link>https://www.lingcoder.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link><description>Recent content in 数据库 on 牛哥聊技术</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 01 Jan 2019 12:20:54 +0800</lastBuildDate><atom:link href="https://www.lingcoder.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL主从同步总结</title><link>https://www.lingcoder.com/p/mysql-master-slave-sync-summary/</link><pubDate>Tue, 01 Jan 2019 12:20:54 +0800</pubDate><guid>https://www.lingcoder.com/p/mysql-master-slave-sync-summary/</guid><description>简说设计模式-单例模式 单例模式 核心作用 : 保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。 应用场景： 网站计数器 数据库连接池的设计 Spring容器 等等 模式优点: – 由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要 比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动 时直接产生一个单例对象，然后永久驻留内存的方式来解决 – 单例模式可以在系统设置全局的访问点，优化环共享资源访问，例如可以设计 一个单例类，负责所有数据表的映射处理 常见实现： 主要: 1. 饿汉式 描述: static变量会在类装载时初始化，由虚拟机保证单线程,可以省略synchronized关键字。 优点: 线程安全，调用效率高。 缺点: 不能延时加载;若只加载本类，而未调用getInstance()，则造成资源浪费！ 示例:
1 2 3 4 5 6 7 public class SingletonHungry { private static SingletonHungry instance = new SingletonHungry(); private SingletonHungry(){} // 私有化构造器 public static SingletonHungry getInstance(){ return instance; } } 2. 懒汉式 描述:
优点: 线程安全，调用效率不高。 但是，有利于资源利用;可以延时加载。 缺点：每次调用getInstance()方法同步，并发效率较低。
示例:
1 2 3 4 5 6 7 8 9 10 public class SingletonLazy { private static instance; private SingletonLazy(){} // 私有化构造器 public static synchronized SingletonLazy getInstance(){ if(instance == null){ instace = new SingletonLzay(); } return instance; } } 其他： 3.</description></item></channel></rss>