<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>牛哥聊技术</title><link>https://www.lingcoder.com/</link><description>Recent content on 牛哥聊技术</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 03 Jan 2023 15:00:00 +0800</lastBuildDate><atom:link href="https://www.lingcoder.com/index.xml" rel="self" type="application/rss+xml"/><item><title>又见第一篇博客</title><link>https://www.lingcoder.com/p/first-blog/</link><pubDate>Tue, 03 Jan 2023 15:00:00 +0800</pubDate><guid>https://www.lingcoder.com/p/first-blog/</guid><description>2023年元旦归来的第一件事，决定再次把博客搞起来。为什么是“又”呢，因为这样的事情做了不下两次了，每次都以荒废告终。 慢慢把以前的文章移过来，希望这次能坚持下去。。。
纸上得来终觉浅，绝知此事要躬行</description></item><item><title>关于</title><link>https://www.lingcoder.com/about/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.lingcoder.com/about/</guid><description/></item><item><title>归档</title><link>https://www.lingcoder.com/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.lingcoder.com/archives/</guid><description/></item><item><title>在Ubuntu18.04中安装JDK8</title><link>https://www.lingcoder.com/p/install-jdk8-on-ubuntu1804/</link><pubDate>Thu, 18 Jun 2020 07:59:17 +0800</pubDate><guid>https://www.lingcoder.com/p/install-jdk8-on-ubuntu1804/</guid><description>安装 Oracle JDK Webupd8 Team维护一个PPA存储库，其中包含适用于所有当前Ubuntu版本的Oracle Java 8安装程序脚本。
打开终端并运行命令添加 PPA： 1 sudo add-apt-repository ppa:webupd8team/java ​ 输入密码（输入时不会显示星号），然后按Enter键继续。
然后运行命令安装Java 8安装程序并在提示时接受许可证： 1 sudo apt-get install oracle-java8-installer 安装完成后，Oracle Java 8应自动设置为默认值。 如果没有，运行命令：
1 sudo apt-get install oracle-java8-set-default 卸载：
移除PPA软件包总是很容易，只需打开终端并运行命令即可：
1 sudo apt-get remove --autoremove oracle-java8-installer oracle-java10-installer 安装 Open JDK 添加 ppa 源 1 sudo add-apt-repository ppa:openjdk-r/ppa 升级系统资源包并安装openjdk1.8： 1 2 3 sudo apt-get update sudo apt-get install openjdk-8-jdk 在多个JDK版本中切换JDK 1 2 sudo update-alternatives --config java sudo update-alternatives --config javac 检查JDK版本： 1 java -version</description></item><item><title>Redis安装和高可用集群搭建</title><link>https://www.lingcoder.com/p/redis-install-and-config/</link><pubDate>Mon, 13 Jan 2020 20:48:02 +0800</pubDate><guid>https://www.lingcoder.com/p/redis-install-and-config/</guid><description>Redis安装和高可用集群搭建 安装步骤 官网下载:https://redis.io/download
CentOS 7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 安装 GCC GC++ yum -y install gcc yum -y install gcc-c++ yum -y install tcl # 下载,解压至/usr/local,切换目录 wget http://download.redis.io/releases/redis-5.0.5.tar.gz tar -zxvf redis-5.0.5.tar.gz -C /usr/local cd /usr/local cd redis-5.0.5 # 编译安装 make make PREFIX=/usr/local/redis-cluster install Ubunt 18.04 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 安装 GCC GC++ sudo apt update sudo apt install make sudo apt install tcl sudo apt install gcc # 下载,解压至/usr/local,切换目录 wget http://download.</description></item><item><title>内网环境集群主机的时间同步</title><link>https://www.lingcoder.com/p/intranet-host-ntp/</link><pubDate>Fri, 14 Jun 2019 00:15:23 +0800</pubDate><guid>https://www.lingcoder.com/p/intranet-host-ntp/</guid><description>内网环境集群主机的时间同步 场景描述 内网主机之间时间不一致，需要作同步；主机多数不能连接外网，只有极少数几台能连接外网 系统环境 centos7 root权限 实施方案 内网中一台主机A (如172.16.59.25)与外网互通，通过外网 NTP 服务器同步时间
主机A对内网提供 NTP 服务
内网其他机器通过主机A进行对时
实施过程 主机A设置 1 2 3 4 5 6 7 8 9 10 # 安装NTP软件 # 方式1 yum -y install ntp # 方式2（严格按照顺序autogen-&amp;gt;ntpdate-&amp;gt;ntp） rpm -hiv autogen-libopts-5.18-5.el7.x86_64.rpm rpm -hiv ntpdate-4.2.6p5-18.el7.centos.x86_64.rpm rpm -hiv ntp-4.2.6p5-18.el7.centos.x86_64.rpm # 编辑NTP配置 vim /etc/ntp.conf ntp.conf 配置如下
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 driftfile /var/lib/ntp/drift # 默认拒绝客户端所有操作 restrict default kod notrap nomodify nopeer noquery # 允许本地操作 restrict 127.</description></item><item><title>Kafka集群搭建</title><link>https://www.lingcoder.com/p/kafka-cluster-install-and-config/</link><pubDate>Thu, 23 May 2019 12:20:54 +0800</pubDate><guid>https://www.lingcoder.com/p/kafka-cluster-install-and-config/</guid><description>Kafka集群搭建 使用场景 异步处理： 如用户注册后，发送注册邮件，再发送注册短信。 应用解耦： 如用户下单后，订单系统需要通知库存系统。 流量削峰：如秒杀活动，一般会因为流量过大，导致流量暴增。 日志处理：解决大量日志采集后的传输问题。消息队列负责日志后续处理转发。 消息通讯： 优点 高吞吐量，非常普通的应将kafka也可以支持每秒数百万的消息。
支持通过kafka服务器和消费机集群来区分消息。
支持hadoop并行数据加载。
关键概念： broker: kafka集群中的一台或多台服务器统称broker。
Topic： kafka处理的消息源（feeds of messages）的不同分类。
partition：Topic物理机上的分组，一个topic可分为多个partition，每个partition是一个有序的队列。其中的每条消息都会被分配一个有序的id（offset）。
Message ：消息，是通信的基本单位。每个producer可以向一个topic（主题）发布一些消息。
Producers：消息和数据的生产者，向kafka的一个topic发布消息的过程叫producers。
consumers：消息和数据消费者，订阅topic并处理其发布的消息的过程叫做consumers。
安装运行 官网地址：http://kafka.apache.org/downloads
1. 软件环境 CenOS7/Ubuntu 虚拟机三台。 已经搭建好的zookeeper集群。 软件版本：kafka_2.12-2.2.0 2. 安装步骤 下载官方二进制包 1 wget https://mirrors.tuna.tsinghua.edu.cn/apache/kafka/2.2.0/kafka_2.12-2.2.0.tgz 解压 1 tar -zxvf kafka_2.12-2.2.0.tgz -C /usr/local/ 修改配置文件 1 vim /usr/local/kafka_2.12-2.2.0/config/server.properties 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 不可重复 # 这是这台虚拟机上的值，在另外两台虚拟机上应该是2或者3， # 这个值是唯一的，每台虚拟机或者叫服务器不能相同 broker.</description></item><item><title>Hyper-V虚拟机固定Ip设置</title><link>https://www.lingcoder.com/p/hyper-v-fixed-ip/</link><pubDate>Fri, 10 May 2019 12:20:54 +0800</pubDate><guid>https://www.lingcoder.com/p/hyper-v-fixed-ip/</guid><description>Hyper-V 虚拟机固定 Ip设置 需求来源 忽略外部网络变化，时刻保持虚拟机的 IP 地址不变。
物理机与虚拟机互访，虚拟机之间互访，虚拟机联网
设置步骤 固定虚拟机 IP
以 192.168.137.X 网段，CentOS-7 操作系统为例。查看虚拟机 IP 1 ip addr 得到需要改的网卡信息后，编辑配置文件 1 2 cd /etc/sysconfig/network-scripts vim ifcfg-eth0 添加下面几行
1 2 3 4 5 6 7 8 BOOTPROTO=&amp;#34;static&amp;#34; DEVICE=&amp;#34;eth0&amp;#34; ONBOOT=&amp;#34;yes&amp;#34; IPADDR=&amp;#34;192.168.137.200&amp;#34; GATEWAY=&amp;#34;192.168.137.1&amp;#34; DNS1=&amp;#34;114.114.114.114&amp;#34; DNS2=&amp;#34;114.114.115.115&amp;#34; NETMASK=&amp;#34;255.255.255.0&amp;#34; 重启网络，使设置生效 1 systemctl restart network 如果是 Ubuntu 18.04,修改方式如下：
1 2 # 编辑 *-cloud-init.yaml 文件,我这里为50-cloud-init.yaml sudo vim /etc/netplan/50-cloud-init.yaml 配置文件修改如下：
1 2 3 4 5 6 7 8 9 10 network: ethernets: eth0: addresses: [192.</description></item><item><title>Git和GitHub使用总结</title><link>https://www.lingcoder.com/p/git-and-github-summary/</link><pubDate>Tue, 01 Jan 2019 14:13:54 +0800</pubDate><guid>https://www.lingcoder.com/p/git-and-github-summary/</guid><description>Git的官方网站：http://git-scm.com
Git和GitHub使用总结 一、GIT初始化设置： 创建密钥 1 ssh‐keygen ‐t rsa ‐C &amp;#34;lingcoder@gmail.com&amp;#34; 远程仓库 1 2 3 4 5 6 7 8 添加远程origin库关联 git remote add origin git@github.com:lingcoder/xxx.git 查看远程仓库 git remote -v 删除远程origin库的关联 git remote rm origin 用户名邮箱配置 全局配置
1 2 3 git config --global user.name &amp;#34;lingcoder&amp;#34; git config --global user.email &amp;#34;lingcoder@gmail.com&amp;#34; git config --list 项目单独配置（在项目根目录下）
1 2 3 git config user.name &amp;#34;lingcoder&amp;#34; git config user.email &amp;#34;lingcoder@gmail.com&amp;#34; git config --list 设置Git默认分支名为 main 1 git config --global init.</description></item><item><title>MySQL主从同步总结</title><link>https://www.lingcoder.com/p/mysql-master-slave-sync-summary/</link><pubDate>Tue, 01 Jan 2019 12:20:54 +0800</pubDate><guid>https://www.lingcoder.com/p/mysql-master-slave-sync-summary/</guid><description>简说设计模式-单例模式 单例模式 核心作用 : 保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。 应用场景： 网站计数器 数据库连接池的设计 Spring容器 等等 模式优点: – 由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要 比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动 时直接产生一个单例对象，然后永久驻留内存的方式来解决 – 单例模式可以在系统设置全局的访问点，优化环共享资源访问，例如可以设计 一个单例类，负责所有数据表的映射处理 常见实现： 主要: 1. 饿汉式 描述: static变量会在类装载时初始化，由虚拟机保证单线程,可以省略synchronized关键字。 优点: 线程安全，调用效率高。 缺点: 不能延时加载;若只加载本类，而未调用getInstance()，则造成资源浪费！ 示例:
1 2 3 4 5 6 7 public class SingletonHungry { private static SingletonHungry instance = new SingletonHungry(); private SingletonHungry(){} // 私有化构造器 public static SingletonHungry getInstance(){ return instance; } } 2. 懒汉式 描述:
优点: 线程安全，调用效率不高。 但是，有利于资源利用;可以延时加载。 缺点：每次调用getInstance()方法同步，并发效率较低。
示例:
1 2 3 4 5 6 7 8 9 10 public class SingletonLazy { private static instance; private SingletonLazy(){} // 私有化构造器 public static synchronized SingletonLazy getInstance(){ if(instance == null){ instace = new SingletonLzay(); } return instance; } } 其他： 3.</description></item><item><title>简谈Java设计模式-单例模式</title><link>https://www.lingcoder.com/p/java-design-patterns-singleton/</link><pubDate>Mon, 01 Jan 2018 12:20:54 +0800</pubDate><guid>https://www.lingcoder.com/p/java-design-patterns-singleton/</guid><description>简说设计模式-单例模式 单例模式 核心作用 : 保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。 应用场景： 网站计数器 数据库连接池的设计 Spring容器 等等 模式优点: – 由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要 比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动 时直接产生一个单例对象，然后永久驻留内存的方式来解决 – 单例模式可以在系统设置全局的访问点，优化环共享资源访问，例如可以设计 一个单例类，负责所有数据表的映射处理 常见实现： 主要: 1. 饿汉式 描述: static变量会在类装载时初始化，由虚拟机保证单线程,可以省略synchronized关键字。 优点: 线程安全，调用效率高。 缺点: 不能延时加载;若只加载本类，而未调用getInstance()，则造成资源浪费！ 示例:
1 2 3 4 5 6 7 public class SingletonHungry { private static SingletonHungry instance = new SingletonHungry(); private SingletonHungry(){} // 私有化构造器 public static SingletonHungry getInstance(){ return instance; } } 2. 懒汉式 描述:
优点: 线程安全，调用效率不高。 但是，有利于资源利用;可以延时加载。 缺点：每次调用getInstance()方法同步，并发效率较低。
示例:
1 2 3 4 5 6 7 8 9 10 public class SingletonLazy { private static instance; private SingletonLazy(){} // 私有化构造器 public static synchronized SingletonLazy getInstance(){ if(instance == null){ instace = new SingletonLzay(); } return instance; } } 其他： 3.</description></item><item><title>Tomcat8日志切割和定期删除</title><link>https://www.lingcoder.com/p/tomcat8-log-splitter/</link><pubDate>Tue, 17 Oct 2017 09:02:06 +0800</pubDate><guid>https://www.lingcoder.com/p/tomcat8-log-splitter/</guid><description>日志切割 安装 cronolog 安装 1 2 3 4 5 6 7 # 下载cronolog-1.6.2.tar.gz 并解压 wget http://cronolog.org/download/cronolog-1.6.2.tar.gz # 解压 tar zxvf cronolog-1.6.2.tar.gz # 编译安装 cd cronolog-1.6.2 ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install 验证安装
1 2 3 4 # 验证是否安装成功 which cronolog # 显示以下信息则成功 # /usr/local/sbin/cronolog 修改 Tomcat 8 配置 替换 tomcat 目录下 /bin/Catalina.sh 文件内容 1 2 3 4 5 if [ -z &amp;#34;$CATALINA_OUT&amp;#34; ] ; then CATALINA_OUT=日志路径/catalina.out fi 为
1 2 3 4 5 if [ -z &amp;#34;$CATALINA_OUT&amp;#34; ] ; then CATALINA_OUT=日志路径/catalina.</description></item><item><title>Zookeeper安装和配置</title><link>https://www.lingcoder.com/p/zookeeper-install-and-config/</link><pubDate>Sun, 14 May 2017 00:15:23 +0800</pubDate><guid>https://www.lingcoder.com/p/zookeeper-install-and-config/</guid><description>Zookeeper安装和配置 准备工作 安装 JDK,此步略。
下载 zookeeper
1 2 3 wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz # 或者 curl -O https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz 解压 zookeeper
1 tar -zxvf zookeeper-3.4.6.tar.gz -C /usr/local/ 创建软链,方便版本转换
1 ln -s zookeeper-3.4.6 zookeeper 单机版安装 切换到 zookeer 软链目录下执行
1 cd usr/local/zookeeper/conf/cp zoo_sample.cfg zoo.cfg 编辑 zoo.cfg 配置文件
1 vim zoo.cfg 启动服务
1 2 3 4 # 启动服务 bin/zkServer.sh start # 测试连接 bin/zkCli.sh –server 127.0.0.1:2181 集群安装 ​ 在zoo.cfg 添加配置,并按照下面的配置部署到相应的机器上,并在相应的服务器的数据目录下创建 myid 文件,并填写本机对应的 server.NUM 数值.如 server.1,则填 1。
1 2 3 4 5 6 7 8 ## 真集群示例 server.</description></item><item><title>链接</title><link>https://www.lingcoder.com/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.lingcoder.com/links/</guid><description/></item><item><title>搜索</title><link>https://www.lingcoder.com/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.lingcoder.com/search/</guid><description/></item></channel></rss>